export const exportResults = (totalScore, maxScore, securityLevel, recommendations, categoryScores) => {
  const scorePercentage = Math.round((totalScore / maxScore) * 100);
  const currentDate = new Date().toLocaleDateString('en-US');
  
  let exportText = `PrivScore Security Assessment Results\n`;
  exportText += `Generated on: ${currentDate}\n`;
  exportText += `Assessment ID: ${Date.now()}\n\n`;
  
  exportText += `=== OVERALL SCORE ===\n`;
  exportText += `Score: ${totalScore}/${maxScore} (${scorePercentage}%)\n`;
  exportText += `Security Level: ${securityLevel.level}\n`;
  exportText += `Description: ${securityLevel.description}\n\n`;
  
  exportText += `=== CATEGORY BREAKDOWN ===\n`;
  Object.entries(categoryScores).forEach(([category, scores]) => {
    exportText += `${category}: ${scores.total}/${scores.possible} (${scores.percentage}%)\n`;
  });
  exportText += `\n`;
  
  exportText += `=== YOUR PERSONAL ACTION PLAN ===\n`;
  recommendations.forEach((rec, index) => {
    exportText += `${index + 1}. [${rec.priority}] ${rec.action}\n`;
    exportText += `   Category: ${rec.category || 'General'}\n`;
    exportText += `   Description: ${rec.description}\n`;
    if (rec.impact) exportText += `   Impact: ${rec.impact}\n`;
    if (rec.timeToImplement) exportText += `   Time to Implement: ${rec.timeToImplement}\n`;
    if (rec.steps) {
      exportText += `   Action Steps:\n`;
      rec.steps.forEach((step, stepIndex) => {
        exportText += `      ${stepIndex + 1}. ${step}\n`;
      });
    }
    exportText += `\n`;
  });
  
  exportText += `=== SECURITY INSIGHTS ===\n`;
  const insights = generateSecurityInsights(categoryScores, totalScore, maxScore);
  insights.forEach(insight => {
    exportText += `• ${insight}\n`;
  });
  exportText += `\n`;
  
  exportText += `=== SECURITY RESOURCES ===\n`;
  exportText += `• Two-Factor Authentication Guide: https://www.cisa.gov/secure-our-world/turn-on-multifactor-authentication\n`;
  exportText += `• Password Security Guide: https://www.nist.gov/cybersecurity/how-do-i-create-good-password\n`;
  exportText += `• Check for Data Breaches: https://haveibeenpwned.com/\n`;
  exportText += `• Phishing Prevention: https://www.cisa.gov/news-events/news/avoiding-social-engineering-and-phishing-attacks\n`;
  exportText += `• Password Strength Checker: https://passgaurd.humanxaihome.com/\n`;
  exportText += `• Free Security Training: https://www.sans.org/security-awareness-training/\n`;
  exportText += `• Malware Protection: https://www.microsoft.com/en-us/windows/comprehensive-security\n\n`;
  
  exportText += `=== NEXT STEPS ===\n`;
  exportText += `1. Implement CRITICAL and HIGH priority recommendations first\n`;
  exportText += `2. Set calendar reminders for security reviews (quarterly recommended)\n`;
  exportText += `3. Monitor security news and update practices accordingly\n`;
  exportText += `4. Retake this assessment in 3-6 months to track progress\n`;
  exportText += `5. Share security knowledge with family and colleagues\n\n`;
  
  exportText += `=== ABOUT PRIVSCORE ===\n`;
  exportText += `PrivScore is a free, privacy-first cybersecurity assessment tool.\n`;
  exportText += `No personal data is collected or stored during the assessment.\n`;
  exportText += `Learn more: https://privscore.humanxaihome.com/\n`;
  exportText += `Support development: https://buymeacoffee.com/humanxai\n\n`;
  
  exportText += `Generated by PrivScore v1.0 - HumanXAI\n`;
  
  // Create and trigger download
  const element = document.createElement('a');
  const file = new Blob([exportText], { type: 'text/plain;charset=utf-8' });
  element.href = URL.createObjectURL(file);
  element.download = `PrivScore_Results_${Date.now()}.txt`;
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
  URL.revokeObjectURL(element.href);
  
  return exportText; // Return for testing or further processing
};

export const exportResultsAsJSON = (totalScore, maxScore, securityLevel, recommendations, categoryScores, answers, questions) => {
  const resultData = {
    meta: {
      assessmentDate: new Date().toISOString(),
      assessmentId: Date.now(),
      version: "1.0",
      tool: "PrivScore"
    },
    scores: {
      total: totalScore,
      maximum: maxScore,
      percentage: Math.round((totalScore / maxScore) * 100),
      securityLevel: securityLevel
    },
    categories: categoryScores,
    recommendations: recommendations,
    rawAnswers: answers.map((score, index) => ({
      questionIndex: index,
      question: questions[index]?.question || 'Unknown',
      category: questions[index]?.category || 'Unknown',
      score: score,
      maxScore: 10
    })),
    insights: generateSecurityInsights(categoryScores, totalScore, maxScore)
  };
  
  const jsonString = JSON.stringify(resultData, null, 2);
  
  const element = document.createElement('a');
  const file = new Blob([jsonString], { type: 'application/json;charset=utf-8' });
  element.href = URL.createObjectURL(file);
  element.download = `PrivScore_Results_${Date.now()}.json`;
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
  URL.revokeObjectURL(element.href);
  
  return resultData;
};

export const exportResultsAsCSV = (totalScore, maxScore, categoryScores, answers, questions) => {
  let csvContent = "Category,Question,Answer Score,Max Score,Percentage\n";
  
  answers.forEach((score, index) => {
    if (index < questions.length) {
      const question = questions[index];
      const percentage = Math.round((score / 10) * 100);
      csvContent += `"${question.category}","${question.question.replace(/"/g, '""')}",${score},10,${percentage}\n`;
    }
  });
  
  csvContent += "\nCategory Summary:\n";
  csvContent += "Category,Total Score,Max Score,Percentage\n";
  
  Object.entries(categoryScores).forEach(([category, scores]) => {
    csvContent += `"${category}",${scores.total},${scores.possible},${scores.percentage}\n`;
  });
  
  csvContent += `\nOverall Score:,${totalScore},${maxScore},${Math.round((totalScore / maxScore) * 100)}\n`;
  
  const element = document.createElement('a');
  const file = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
  element.href = URL.createObjectURL(file);
  element.download = `PrivScore_Results_${Date.now()}.csv`;
  element.style.display = 'none';
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
  URL.revokeObjectURL(element.href);
  
  return csvContent;
};

export const copyResultsToClipboard = async (totalScore, maxScore, securityLevel, recommendations, categoryScores) => {
  const exportText = generateExportText(totalScore, maxScore, securityLevel, recommendations, categoryScores);
  
  try {
    await navigator.clipboard.writeText(exportText);
    return { success: true, message: 'Results copied to clipboard!' };
  } catch (err) {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = exportText;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.select();
    
    try {
      document.execCommand('copy');
      document.body.removeChild(textArea);
      return { success: true, message: 'Results copied to clipboard!' };
    } catch (fallbackErr) {
      document.body.removeChild(textArea);
      return { success: false, message: 'Failed to copy to clipboard' };
    }
  }
};

export const shareResults = (totalScore, maxScore, securityLevel) => {
  const scorePercentage = Math.round((totalScore / maxScore) * 100);
  const shareText = `I just completed my PrivScore cybersecurity assessment and scored ${scorePercentage}% (${securityLevel.level})! Take the free assessment to check your security posture: https://privscore.humanxaihome.com/`;
  
  if (navigator.share) {
    navigator.share({
      title: 'My PrivScore Security Assessment Results',
      text: shareText,
      url: 'https://privscore.humanxaihome.com/'
    }).catch(console.error);
  } else {
    // Fallback to copying share text
    copyResultsToClipboard(shareText);
  }
};

// Helper function to generate security insights
const generateSecurityInsights = (categoryScores, totalScore, maxScore) => {
  const percentage = (totalScore / maxScore) * 100;
  const insights = [];
  
  // Overall performance insight
  if (percentage >= 90) {
    insights.push("🌟 Exceptional security posture - you're in the top 10% of users!");
  } else if (percentage >= 70) {
    insights.push("✅ Solid security foundation with room for strategic improvements.");
  } else if (percentage >= 50) {
    insights.push("⚠️ Moderate security level - focus on critical gaps first.");
  } else {
    insights.push("🚨 Multiple security vulnerabilities need immediate attention.");
  }
  
  // Category-specific insights
  const sortedCategories = Object.entries(categoryScores)
    .sort((a, b) => a[1].percentage - b[1].percentage);
  
  const weakest = sortedCategories[0];
  const strongest = sortedCategories[sortedCategories.length - 1];
  
  if (weakest[1].percentage < 30) {
    insights.push(`🔴 ${weakest[0]} is critically weak and needs immediate focus.`);
  } else if (weakest[1].percentage < 60) {
    insights.push(`🟡 ${weakest[0]} shows significant room for improvement.`);
  }
  
  if (strongest[1].percentage >= 90) {
    insights.push(`🟢 Excellent ${strongest[0]} practices - keep it up!`);
  }
  
  // Pattern-based insights
  const accountSecurity = categoryScores['Account Security'];
  const digitalAwareness = categoryScores['Digital Awareness'];
  
  if (accountSecurity && digitalAwareness) {
    if (accountSecurity.percentage < 50 && digitalAwareness.percentage < 50) {
      insights.push("⚠️ Low account security + poor awareness = high risk of credential theft.");
    }
  }
  
  return insights;
};

// Helper function to generate export text (used by copy function)
const generateExportText = (totalScore, maxScore, securityLevel, recommendations, categoryScores) => {
  const scorePercentage = Math.round((totalScore / maxScore) * 100);
  const currentDate = new Date().toLocaleDateString('en-US');
  
  let text = `PrivScore Security Assessment Results (${currentDate})\n\n`;
  text += `Overall Score: ${totalScore}/${maxScore} (${scorePercentage}%)\n`;
  text += `Security Level: ${securityLevel.level}\n\n`;
  
  text += `Category Breakdown:\n`;
  Object.entries(categoryScores).forEach(([category, scores]) => {
    text += `• ${category}: ${scores.percentage}%\n`;
  });
  
  text += `\nTop Recommendations:\n`;
  recommendations.slice(0, 3).forEach((rec, index) => {
    text += `${index + 1}. [${rec.priority}] ${rec.action}\n`;
  });
  
  text += `\nGenerated by PrivScore - https://privscore.humanxaihome.com/`;
  
  return text;
};